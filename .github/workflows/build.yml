name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: uservoice

jobs:
  # test-ui:
  #   name: test-ui
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js 14.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 14.x
  #     - run: npm ci
  #     - run: make lint-ui
  #     - run: make test-ui

  # test-server:
  #   name: test-server
  #   runs-on: ubuntu-latest
  #   services:
  #     minio:
  #       image: getfider/minio:0.0.2
  #       ports:
  #         - 9000:9000
  #       env:
  #         MINIO_ACCESS_KEY: s3user
  #         MINIO_SECRET_KEY: s3user-s3cr3t
  #     postgres:
  #       image: postgres:12
  #       env:
  #         POSTGRES_USER: fider_ci
  #         POSTGRES_PASSWORD: fider_ci_pw
  #         POSTGRES_DB: fider_ci
  #       ports:
  #         - 5432:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Go 1.16.2
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.16.2
  #     - name: Use Node.js 14.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 14.x
  #     - run: npm ci # required for esbuild
  #     - name: install golangci-lint
  #       run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.38.0
  #     - name: install godotenv
  #       run: go install github.com/joho/godotenv/cmd/godotenv
  #     - run: make lint-server
  #     - name: make test-server
  #       run: |
  #         mkdir ./dist
  #         make test-server
  #       env:
  #         BLOB_STORAGE_S3_ENDPOINT_URL: http://localhost:9000
  #         DATABASE_URL: postgres://fider_ci:fider_ci_pw@localhost:5432/fider_ci?sslmode=disable

  build:
    name: build
    runs-on: ubuntu-latest
    environment: Production
    # needs: [test-server, test-ui] 
    steps:
      - uses: actions/checkout@v2

      - name: extract variables
        run: |
          echo "##[set-output name=sha7;]$(echo ${GITHUB_SHA::7})"
          echo sha7=${GITHUB_SHA::7}
        id: vars

      - run: docker build --build-arg buildnumber=${{ steps.vars.outputs.sha7 }} -t $IMAGE_NAME .

      - run: echo ${{ github.event.number }}
        if: ${{ github.event_name == 'pull_request' }}

      - run: echo ${{ steps.vars.outputs.sha7 }}
        if: ${{ github.event_name == 'push' }}

      - name: Authenticate into Google Cloud Platform
        uses: google-github-actions/setup-gcloud@main
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCLOUD_KEY }}
          export_default_credentials: true

      - name: Configure Docker to use Google Cloud Platform
        run: "gcloud auth configure-docker --quiet"

      - name: Push and deploy image
        run: |
          IMAGE_ID=eu.gcr.io/${{ secrets.GCLOUD_PROJECT }}/uservoice
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          GCP_INSTANCE_NAME=${{ secrets.GCP_INSTANCE_NAME }}
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo GCP_INSTANCE_NAME=$GCP_INSTANCE_NAME
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

          gcloud run deploy $GCP_INSTANCE_NAME --image $IMAGE_ID:$VERSION \
          --project ${{ secrets.GCLOUD_PROJECT }} \
          --region europe-west1 \
          --allow-unauthenticated \
          --platform managed \
          --port 3000 \
          --set-env-vars DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --set-env-vars EMAIL_NOREPLY=noreply@bcc.no \
          --set-env-vars EMAIL_SMTP_HOST=smtp.office365.com \
          --set-env-vars EMAIL_SMTP_PASSWORD=${{ secrets.EMAIL_SMTP_PASSWORD }} \
          --set-env-vars EMAIL_SMTP_PORT=587 \
          --set-env-vars EMAIL_SMTP_USERNAME=noreply@bcc.no \
          --set-env-vars HOST_DOMAIN=uservoice.bcc.no \
          --set-env-vars JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          --set-env-vars GOOGLE_ANALYTICS="${{ secrets.GOOGLE_ANALYTICS }}" \
          --set-env-vars GCP_ProjectID=${{ secrets.GCLOUD_PROJECT }}^

        # Database url example for Google Cloud SQL
        # postgresql:///fider?host=/cloudsql/uservoice-310918:europe-west1:uservoice-sql&user=postgres&password=******&sslmode=disable